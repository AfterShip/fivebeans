{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"A beanstalkd client for node.js & a simple framework for running beanstalkd workers.","body":"A straightforward and (nearly) complete [beanstalkd](http://kr.github.com/beanstalkd/) client for node.js, along with a more opinionated beanstalkd jobs worker & runner.\r\n\r\n## FiveBeansClient\r\n\r\nHeavily inspired by [node-beanstalk-client](https://github.com/benlund/node-beanstalk-client), which is a perfectly usable client but somewhat dusty. I wanted more complete support of the beanstalkd protocol in a project written in plain javascript.\r\n\r\nAll client method names are the same case & spelling as the beanstalk text command, with hyphens replaced by underscore. The single exception is \"delete\", which is renamed to \"destroy\".\r\n\r\nFor complete details on the beanstalkd commands, see [its protocol documentation](https://github.com/kr/beanstalkd/blob/master/doc/protocol.txt).\r\n\r\n### Creating a client\r\n\r\n```javascript\r\nvar fivebeans = require('fivebeans');\r\nvar client = new fivebeans.client('10.0.1.1', 11300);\r\nclient.connect(function(err)\r\n{\r\n\t// client can now be used\r\n});\r\n```\r\n\r\nThe constructor takes two arguments: \r\n\r\n__host__: The address of the beanstalkd server. Defaults to `127.0.0.1`.  \r\n__port__: Port to connect to. Defaults to `11300`.\r\n\r\n`connect` takes one callback argument. Its `err` parameter is `null` when the the client has connected to beanstalkd, an error object when a connection error has occurred, or `false` when the connection has been closed.\r\n\r\nBe aware: after connecting, the callback will be called again if a connection error occurs or the server disconnects!\r\n\r\n### Producing jobs\r\n\r\n#### use\r\n\r\n`client.use(tube, function(err, tubename) {});`\r\n\r\nUse the specified tube. Reponds with the name of the tube being used.\r\n\r\n#### list_tube_used\r\n\r\n`client.list_tube_used(function(err, tubename) {});`\r\n\r\nResponds with the name of the tube currently being used by the client.\r\n\r\n#### put\r\n\r\n`client.put(priority, delay, ttr, payload, function(err, jobid) {});`\r\n\r\nSubmit a job with the specified priority (smaller integers are higher priority), delay in seconds, and allowed time-to-run in seconds. The payload contains the job data the server will return to clients reserving jobs; it can be either a Buffer object or a string. No processing is done on the data. Responds with the id of the newly-created job.\r\n\r\n#### peek_ready\r\n\r\n`client.peek_ready(function(err, jobid, payload) {});`\r\n\r\nPeek at the data for the job at the top of the ready queue of the tube currently in use. Responds with the job id and payload of the next job, or 'NOT_FOUND' if there are no qualifying jobs in the tube. The payload is a Buffer object.\r\n\r\n#### peek_delayed\r\n\r\n`client.peek_delayed(function(err, jobid, payload) {});`\r\n\r\nPeek at the data for the delayed job with the shortest delay in the tube currently in use. Responds with the job id and payload of the next job, or 'NOT_FOUND' if there are no qualifying jobs in the tube. The payload is a Buffer object.\r\n\r\n#### peek_buried\r\n\r\n`client.peek_buried(function(err, jobid, payload) {});`\r\n\r\nPeek at the data for the next buried job in the tube currently in use. Responds with the job id and payload of the next job, or 'NOT_FOUND' if there are no qualifying jobs in the tube. The payload is a Buffer object.\r\n\r\n### Consuming jobs\r\n\r\n#### watch\r\n\r\n`client.watch(tube, function(err, numwatched) {});`\r\n\r\nWatch the named tube. Responds with the number of tubes currently watched by the client.\r\n\r\n#### ignore\r\n\r\n`client.ignore(tube, function(err, numwatched) {});`\r\n\r\nIgnore the named tube. Responds with the number of tubes currently watched by the client.\r\n\r\n#### list_tubes_watched\r\n\r\n`client.list_tubes_watched(function(err, tubelist) {});`\r\n\r\nResponds with an array containing the names of the tubes currently watched by the client.\r\n\r\n#### reserve\r\n\r\n`client.reserve(function(err, jobid, payload) {});`\r\n\r\nReserve a job. Responds with the id and the job data. The payload is a Buffer object.\r\n\r\n#### reserve_with_timeout\r\n\r\n`client.reserve_with_timeout(seconds, function(err, jobid, payload) {});`\r\n\r\nReserve a job, waiting the specified number of seconds before timing out. *err* contains the string \"TIMED_OUT\" if the specified time elapsed before a job became available. Payload is a buffer.\r\n\r\n#### touch\r\n\r\n`client.touch(jobid, function(err) {});`\r\n\r\nInform the server that the client is still processing a job, thus requesting more time to work on it. \r\n\r\n#### destroy\r\n\r\n`client.destroy(jobid, function(err) {});`\r\n\r\nDelete the specified job. Responds with null if successful, a string error otherwise. This is the only method not named identically to its beanstalkd counterpart, because delete is a reserved word in Javascript.\r\n\r\n#### release\r\n\r\n`client.release(jobid, priority, delay, function(err) {});`\r\n\r\nRelease the specified job and assign it the given priority and delay (in seconds). Responds with null if successful, a string error otherwise. \r\n\r\n#### bury\r\n\r\n`client.bury(jobid, priority, function(err) {});`\r\n\r\nBury the specified job and assign it the given priority. Responds with null if successful, a string error otherwise. \r\n\r\n#### kick\r\n\r\n`client.kick(maxToKick, function(err, numkicked) {});`\r\n\r\nKick at most *maxToKick* delayed and buried jobs back into the active queue. Responds with the number of jobs kicked.\r\n\r\n### Server statistics\r\n\r\n#### peek\r\n\r\n`client.peek(id, function(err, jobid, payload) {});`\r\n\r\nPeek at the data for the specified job. Payload is a Buffer object.\r\n\r\n#### pause_tube\r\n\r\n`client.pause_tube(tubename, delay, function(err) {});`\r\n\r\nPause the named tube for the given number of seconds. No new jobs may be reserved from the tube while it is paused.\r\n\r\n#### list_tubes\r\n\r\n`client.list_tubes(function(err, tubenames) {});`\r\n\r\nList all the existing tubes. Responds with an array of tube names.\r\n\r\n#### stats_job\r\n\r\n`client.stats_job(jobid, function(err, response) {});`\r\n\r\nRequest statistics for the specified job. Responds with a hash containing information about the job. See the beanstalkd documentation for a complete list of stats.\r\n\r\n#### stats_tube\r\n\r\n`client.stats_tube(tubename, function(err, response) {});`\r\n\r\nRequest statistics for the specified tube. Responds with a hash containing information about the tube. See the beanstalkd documentation for a complete list of stats.\r\n\r\n#### stats\r\n\r\n`client.stats(function(err, response) {});`\r\n\r\nRequest statistics for the beanstalkd server. Responds with a hash containing information about the server. See the beanstalkd documentation for a complete list of stats.\r\n\r\n## FiveBeansWorker\r\n\r\nInspired by [node-beanstalk-worker](https://github.com/benlund/node-beanstalk-worker)\r\nbut updated & rewritten to work with jobs queued by [Stalker](https://github.com/kr/stalker). \r\n\r\nThe worker pulls jobs off the queue & passes them to matching handlers. It deletes successful jobs & requeues unsuccessful ones. It logs its actions to the console and to a file.\r\n\r\nEach job must be a JSON list containing two items:\r\n\r\n`[ tubename, jobdata ]`\r\n\r\nThis is for compatibility with the Stalker library, which wraps the job data this way.\r\n\r\nThe job data is a hash with two fields:\r\n\r\n__type__: type string matching a handler  \r\n__payload__: job data, in whatever format the job defines\r\n\r\nThe worker looks up a handler using the given type string and calls work() on the job payload.\r\n\r\nHandler modules must export a single function that returns an object. The object must have a field called 'type' with a brief descriptive string. It must also expose a function called work() with this signature:\r\n\r\n`work(jobdata, callback(action, delay))`\r\n\r\n__jobdata__: job payload  \r\n__action__: 'success' | 'release' | 'bury' | custom error message  \r\n__delay__: time to delay if the job is released; otherwise unused\r\n\r\nIf the *action* is \"success\", the job is deleted. If it is \"release\", the job is released with the specified delay. If it is \"bury\", the job is buried. All other actions are treated as errors & the job is buried in response.\r\n\r\nWhen the worker loads its handlers, it sets a `logger` field on each to its own logger object. Handlers may therefore call winston logging methods on `this.logger` in their work methods. \r\n\r\nHere's a simple handler example.\r\n\r\n```javascript\r\nmodule.exports = function()\r\n{\r\n    function EmitKeysHandler()\r\n    {\r\n        this.type = 'emitkeys';\r\n    }\r\n\r\n    EmitKeysHandler.prototype.work = function(payload, callback)\r\n    {\r\n        var keys = Object.keys(payload);\r\n        for (var i = 0; i < keys.length; i++)\r\n            this.logger.info(keys[i]);\r\n        callback('success');\r\n    }\r\n\r\n    var handler = new EmitKeysHandler();\r\n    return handler;\r\n};\r\n```\r\n\r\nThe [examples](fivebeans/examples) directory has another sample handler.\r\n\r\n\r\n### API\r\n\r\n`new FiveBeansWorker(options)`\r\n\r\nReturns a new worker object. *options* is a hash containing the following keys:\r\n\r\n__id__: how this worker should identify itself in logs   \r\n__host__: beanstalkd host  \r\n__port__: beanstalkd port  \r\n__logdir__: directory for log files  \r\n__handlers__: object with handler objects, having the handler type as key.\r\n\r\n`start(tubelist, ignoreDefault)`\r\n\r\nConnects the worker to the beanstalkd server & sets it watching the specified tubes. The second option controls whether to ignore the default tube.\r\n\r\n### Example\r\n\r\nThis example starts a worker, capable of handling the `emitkeys` example from above.\r\n\r\n```javascript\r\n\r\nvar beanworker = require('fivebeans').worker;\r\nvar handlerList = {\r\n\temitkeys: require('./emitkeyshandler');\r\n}\r\nvar options = {\r\n\tid: 'worker_4', \r\n\thost: '127.0.0.1',\r\n\tport: 11300,\r\n\tlogdir: \"./logs\",\r\n\thandlers: handlerList,\r\n}\r\nvar worker = new beanworker(options);\r\nworker.start(['high', 'medium', 'low'], true);\r\nreturn worker;\r\n```\r\n\r\n## FiveBeansRunner\r\n\r\nA wrapper that runs a single beanstalkd worker as a daemon. Responds to the USR2 signal by reloading the configuration and restarting the worker. Handles SIGINT, SIGHUP, and SIGQUIT by completing processing on the current job then stopping.\r\n\r\nExample use:\r\n\r\n```javascript\r\nvar fivebeans = require('fivebeans');\r\nvar runner = new fivebeans.runner('worker_id_1', '/path/to/config.yml');\r\nrunner.go();\r\n```\r\n\r\n### bin/beanworker\r\n\r\nThe above code plus [optimist](https://github.com/substack/node-optimist) wrapped in a node shell script for your convenience.\r\n\r\n`bin/beanworker --id=[ID] --config=[config.yml]`\r\n\r\nCreates a runner for a worker with the specified ID & configured with the specified yaml file.\r\n\r\n### Configuration file\r\n\r\nHere's an example yaml configuration:\r\n\r\n```yaml\r\nbeanstalkd:\r\n    host: \"127.0.0.1\"\r\n    port: 11300\r\nwatch:\r\n    - 'circle'\r\n    - 'picadilly'\r\n    - 'northern'\r\n    - 'central'\r\nhandlers:\r\n    - \"./handlers/holborn.js\"\r\n    - \"./handlers/greenpark.js\"\r\n    - \"./handlers/knightsbridge.js\"\r\nlogdir: \"/path/to/log\"\r\nignoreDefault: true\r\n```\r\n\r\n__beanstalkd__: where to connect  \r\n__watch__: a list of tubes to watch.  \r\n__handlers__: a list of handler files to require  \r\n__logdir__: path to the directory for worker logs  \r\n__ignoreDefault__: true if this worker should ignore the default tube\r\n\r\nYou may omit the __logdir__ line to suppress logging to a file.\r\n\r\nIf the handler paths don't start with `/` the current working directory will be prepended to them before they are required.\r\n\r\n## TODO \r\n\r\n* Handle DEADLINE_SOON from the server.  \r\n\r\n* Write proper unit tests for the worker/runner/handler interaction.\r\n\r\n","google":"","name":"Fivebeans"}
